The purpose of this document is to describe the different datastructures used by the UTU/DR-Planner/ESM and how they are converted into integer and double arrays to be passed to the sketcher. 

There will be one section dedicated to each of the major classes described in the mfa2Clas.h file, the header file for these classes interface and declaration.  Each section will have to following format, first a quick overview of the purpose of each class.  Then, a copy of the variables section of the interface.  It can be assumed that each class includes accessor and modification methods to access each of these variables, and that all of these methods are described by the documentation in the mfa2Clas.h file.  Any other methods in the classes are not pertinent to This discussion of datastructures and are not included in this file.  They can be found as well in the documentation in mfa2Clas.h.  The final part of each section will be the order and manner that each of these objects is coded into integers and double.  This part will be two separate lists, one for integers and one for doubles, demonstrating the order presented. 

I want to note here that all of the output to the arrays starts at index 1, not 0, in the arrays.  The first integer is reserved for a count of the number of elements in the array when outputting and a flag to select the mode of operation of the UTU and solver when inputting.  In application, the output of consecutive structures makes use of this element count to assure that different are successfully concatenated within the array.  For example suppose I must output the three vertex structures, the first vertex is output starting at index 1 in both the double and the integer arrays, after all the data has been written, the output method places the number of doubles output as the first int in the double array and the number of integers output in the integer array. When the next vertex must be output, it reads the first item in each array and skips this many entries before beginning output, assuring that all the objects are output one after each other with no overlap.

All of this input and output is handled by a set of methods in the mfa9Solver.cpp file.  These files are named ObjectToArray, for output, and ReadObjectFromArray, for input, where object represents the specific class to be written or read, vertex, edge, graph or cluster.

Finally, all of the communication that takes places between the Sketcher and the UTU/DR-Planner/ESM is appended to the end of the arrays created by the methods below.  This data is passed back, exactly, to the UTU/DR-Planner/ESM later, so this description is valid both for input and output.



Vertex:


Overview:

The vertex datastructure models the various geometric objects that are rendered in the sketcher.


Interface Variables:

   int name;           // unique object ID
   int type;           // point=0,line=1,ray=2,LSeg=3,circle=4,arc=5
   int weight;         // number of degrees of freedom
   float degValues[8]; // solved values of this object
   int freeDegs[8];    // if freeDegs[i]=0, solver can change degValues[i]
                       // if freeDegs[i]=1, degValues[i] is changed by solver
                       // if freeDegs[i]=-1, degValues[i] is fixed by user
                       // if freeDegs[i]=-2, degValues[i] is NA(Not Applicable) or not defined
   
    //Table shows the different types of degrees of freedom used for each object type and
    //the degvalue location where it is stored
    /******************************************************************\
    *              point line   Ray   LineSeg circle  arc      cluster *
    *  degValue[0]   x    x1     x1     x1      x      x        x-sft  *
    *  degValue[1]   y    y1     y1     y1      y      y        y-sft  *
    *  degValue[2]   -    x2     x2     x2      r      r       rot-cos *
    *  degValue[3]   -    y2     y2     y2      -    angle     rot-sin *
    *  degValue[4]   -  slope   cos   slope     -  start_cos      -    *
    *  degValue[5]   -          sin   length    -  start_sin      -    *
    *  degValue[6]   -    -      -      -       -   end_cos       -    *
    *  degValue[7]   -    -      -      -       -   end_sin       -    *
    \******************************************************************/
      
   List<int> incid;  // List of the ID's of the inicident edges
   int nIncid;       // number of incident edges
   int label;        // 0 or 1 used for augmenting path
   int scan;         // 0 or 1 used for augmenting path
   int frozen;       // If frozen=1, we don't distribute; If frozen=2, frozen forever
   int posFlow;      // possible flow that could be delivered to this vertex
   int existFlow;    // flow already absorbed by this vertex
   int predEdge;     // predecessor edge in the augmenting path
   int depth;        // depth==0 for original vertex

Coding Method:

Integers:

1.  Name
2.  Type
3.  Weight
4.  Depth
5.  Label
6.  Scan
7.  Frozen
8.  PosFlow
9.  EstFlow
10. numIncid
11. ID's of the incident edges in the order they are stored in the incid list
12. PredEdg
13. Each of the 8 values stored in freeDegs in order from index 0 to 7

Floats:

1.  Each of the 8 values stored in degValues in order from index 0 to 7


Edge:


Overview:

The edge structure stores information concerning the different constraints drawn in the sketcher.



Interface Variables:

   int name;             // name = Constraint ID
   int type;             // 0=distance, 1=incidence, ...
   int weight;           // DOF is removed by the constraint
   float value;          // of distance, angle, etc.   
   int end1;             // ID of the vertex at end1
   int end2;             // ID of the vertex at end2
   int part1;            // part of shape involved in an incidence constraint
                         // 0=arbitrary, 1=point1, 2=point2, 3=center
   int part2;            // same as part1
   int label;            // 0 or 1 used for augmenting path
   int scan;             // 0 or 1 used for augmenting path
   int flow1;            // flow to end1
   int flow2;            // flow to end2
   int posFlow;          // possible flow to deliver to this edge
   int predVertex;       // predecessor Vertex in the augmenting path


Coding Method:

Integers:

1.  Name
2.  Type
3.  Weight
4.  Label
5.  Scan
6.  PosFlow
7.  Flow1
8.  Flow2
9.  End1
10. Part1
11. End2
12. Part2
13. PredVer

Floats:

1.  Value


Graph:

Overview:

The graph structure is used by the DR-Planner to calculate the minimal subgraph decomposition of the constraint system.  It consists mainly of list of vertices and edges which consistute the graph itself.


Interface Variables:

   int dimension;               // dimension=2 or 3
   int NumVert;                 // # of vertices
   int NumEdge;                 // # of edges
   int depth;                   // depth of the largest cluster in the graph
   List<Vertex> vertices;       // list of the vertices in the graph
   List<Edge> edges;            // list of the edges in the graph


Coding:

Integers:

1.  Dimen
2.  Depth
3.  number of vertices in the vertex list
4.  output of each of the vertices, in the manner described above, in the order they appear in the vertex list
5.  number of edges in the edge list
6.  output of each of the edges, in the manner described above, in the order they appear in the edge list

Floats:

No special floats are output for the graph structure except those included in the output of the edge and vertex structures


Cluster:

Overview:

The cluster datastructure is designed to represent the simplification of the minimal dense subgraphs found by
the DR-Planner.  The structure stores:

frontier vertices, which are all those vertice which have edges connected to vertices not in the subgraph.  
interior vertives, those vertice which are not frontier
interior edges, those edges connecting interior vertices
outer edges, all those edges that are not interior
original vertices, a list of the ID's of the vertices in the graph structure from which this decomposition plan
                   was made corresponding to those vertice in this subgraph
core vertex, a pseudovertex made by created by making a new vertex whose weight equals the sum of the weights of
             all of the interior vertices, minus the sum of all of the weights of the interior edges.
group, the number of the group that the user specified in this partial decomposition scheme that this cluster
       represents
a list of the bifurcations created when the equation set for this cluster was solved
a list of the current rotation/translation matrix for this cluster stored in four parts x-displacement,
       y-displacement, sine of rotation angle, and cosine of rotation angle
a boolean stating whether this cluster's equation system has been solved or not (true is solved)
a list of subclusters wholly contained within this cluster (this clusters children)


Interface Variables:

   Vertex core;           // core vertex formed by the reduction of all the interior vertices in the cluster
   int group;             // group ID is specified by user
   List<int> frontiers;   // list of the frontier edges in the cluster by ID
   List<Edge> innerE;     // list of edges between core and frontiers
   List<Edge> outerE;     // list of edges between frontiers
   List<int> originalV;   // list of vertices corresponding to original graph
   List<string> bifurs;   // list of the strings representing the bifurcations of this cluster
   int constrain;         // 1--well constrained, 2,3,...--over constrained
   int numBifurs;         // lenght of the list bifurs
   int currBifur;         // the currently selected bifurcation, -1 means no selection
   bool solved;           // true if the cluster has been solved before
   int currDeg;           // the index of the currect set of DegValues;
   List<DegValues> values;// same format and use as in Vertex
   List<Cluster> children;    // list of children


Coding:

Integers:

1.  Group
2.  number of frontier vertices
3.  ID's of the frontier vertices as they appear in the frontiers list
4.  number of interior edges
5.  output of the interior edges as they appear in the InnerE list using the coding method above
6.  number of outer edges
7.  output of the outer edges as they appear in the OuterE list using the coding method above
8.  number of original vertices
9.  ID's of the original vertives as they appear in OriginalV
10. number of bifurcations for this cluster
11. currently chosen bifurcation
12. output of each of the bifuraction strings (Strings are output by storing the ascii value of each character
    in successive integers in the array
13. the state of the solved boolean, 0 for true, -1 for false
14. currently selected set of solved values
15. number of sets of solved values
16. number of children
17. each of the children as they appear in the children list

Floats:

1.  the values stored in each DegValues, in order index 0 to 7, in the order they appear in the values list

No other floats are specifically stored except those used to store sub datastructures like edges and children
clsuters.


An Example:

The output for even a simple cluster is lengthy.  I have placed here a copy of the values generated for a simple
cluster formed like a diamond (it is the first example in the sketcher's documenation) of 4 points and 5
distance constraints.  What is output in the file is the original input graph, then the DR-Plan for this graph.

See the file dataStructuresExamplesOutput.txt for the values.
