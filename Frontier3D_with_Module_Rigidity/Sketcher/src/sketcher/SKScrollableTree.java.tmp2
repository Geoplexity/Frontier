   // SK scrollable tree in version mod 2 done with perfect tree display with minimal crossings.

   package sketcher;

   import java.awt.*;
   import java.awt.event.*;
   import javax.swing.*;
   import javax.swing.border.*;

   public class SKScrollableTree extends scrollableFrame
   {
      public Container container = null;
      public SKGTNArray Tree = null;
      public SKGroupTreeNode Root = null;
      public int[] flag;
      public int ID;
      public SKMainFrame temp = null;
      public SKTextArray text = new SKTextArray(2);
      public SKEdgeArray edges = null;
      private Color black = Color.black;
      private Color magenta = Color.magenta;
      private Color red = Color.red;
      private Color blue = Color.blue;

   
      public SKScrollableTree(Container cont,SKMainFrame frameMain, SKGTNArray t, SKGroupTreeNode r, int active, int[] fin)
      {
         super(frameMain);
         temp = frameMain;
         container = cont;
         Tree = t;
         Root = r;
         ID = active;
         flag = fin;
         try 
         {
            jbInit();
            setSize(500,350);
            /*Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
            Dimension d = getSize();
            int x = (screen.width - d.width) >> 1;   
            int y = (screen.height - d.height) >> 1;
            setLocation(x, y);*/
         }
            catch(Exception e)
            {      
               e.printStackTrace();
            }
      
      }
      public void jbInit()
      {
         addMouseListener(
                            new java.awt.event.MouseAdapter()
                            {

                               public void mouseClicked(MouseEvent e)
                               {
                                  if (e.isControlDown())
                                  { //Draw the original tree  changed to add container type SKBifurframe2d
				     if(container instanceof SKBifurFrame2d)
				     	((SKBifurFrame2d)container).drawOriginalTree();
			             else
                                     if(container instanceof TreeDialog)
                                        ((TreeDialog)container).drawOriginalTree();
                                     else
                                        ((TreeFrame)container).drawOriginalTree();
                                     repaint();
                                  }
                                  else
                                  {
                                     if(e.getComponent() != null && doHitTest(e.getX(),e.getY()) != null )
                                     {
					if(container instanceof SKBifurFrame2d)
					{
					   ((SKBifurFrame2d)container).mouseOverItem = (SKText)doHitTest(e.getX(),e.getY());
					   ((SKBifurFrame2d)container).reDrawTree();
					}
					else
                                        if(container instanceof TreeDialog)
                                        {
                                           ((TreeDialog)container).mouseOverItem =(SKText)doHitTest(e.getX(),e.getY());
                                           ((TreeDialog)container).reDrawTree();
                                        }
                                        else
                                        {
                                           ((TreeFrame)container).mouseOverItem =(SKText)doHitTest(e.getX(),e.getY());
                                           ((TreeFrame)container).reDrawTree();
                                        }
                                        repaint();
                                     }
                                  } 
                               
                               
                               }
                            
                               public void mouseReleased(MouseEvent e)
                               {
                               }
                            
                            });
         addMouseMotionListener(
                              
                                 new java.awt.event.MouseMotionAdapter()
                                 
                                 {
                                 
                                    public void mouseMoved(MouseEvent e)
                                    
                                    {
                                       if(container instanceof TreeDialog)
                                          ((TreeDialog)container).mouseMoved(e);
                                    }
                                 });
      
      }
      public void paint(Graphics g)
      {
         super.paint(g);
         for(int i = 0; i<getComponentCount() ;i++)
            ((SKText)getComponent(i)).paintComponent(g);
         g.setColor(black);
         for(int i =0; i<edges.size(); i++)
            g.drawLine(edges.get(i).x1,edges.get(i).y1,edges.get(i).x2,edges.get(i).y2);
      }
      public void drawTree()
      {
         SKGroupTreeNode temp1; //New addition for display purposed...
         SKGTNArray tree = Tree;
         SKGroupTreeNode root = Root;

         SKGTNArray tempArray = new SKGTNArray(1);
         SKGTNArray finalArray = new SKGTNArray(1);
         SKGTNArray rootArray = new SKGTNArray(1);
         SKGTNArray children = new SKGTNArray(1);
	 SKGTNArray parents = new SKGTNArray(1); // Added array to store the parents...
         SKShapeArray exshapes = new SKShapeArray(1);
	 SKShapeArray drawnShapes = new SKShapeArray(1); // For shapes associated with the childen at lowermost level addition
	 SKGTNArray drawnGroups =  new SKGTNArray(1); //added to see which clusters have been drawn
	 SKGTNArray tempCluster = new SKGTNArray(1); // Array used to store the clusters.
	 SKGTNArray TEMP = new SKGTNArray(1);
	 SKGTNArray TEMP1 = new SKGTNArray(1); // This array needed to do the grouping of the other children.

         edges = new SKEdgeArray(2);

         int center = 0;
         int x1,y1,x2,y2,total=0;
	 int currLevel, maxLevel = 0; //Var to calculate the max level.
	 int currY, currXoffset;

         //-- Code Aditee
         for(int i = temp.SelectedShapes.size() - 1 ; i >= 0 ;i--)
         {
            temp.removeSelectedShape(temp.SelectedShapes.get(i));
         //System.out.println("Selected Shapes Removed! ");
         }

         //-- end Aditee
         text.clear();
         this.removeAll();
         tree.copyArrayTo(tempArray);
//	 System.out.println(tempArray.size());
         for(int i=0; i< tempArray.size();i++)
         {
	 	SKGroups.setLevels(tempArray);
		temp1 = tempArray.get(i);
		if(temp1.level > maxLevel) maxLevel = temp1.level; // Find the max level
		//System.out.println(temp1.name + " " + temp1.ID + " " + temp1.parents.size() + " " + temp1.children.size() + " " + temp1.shapes.size() +  " " + temp1.level);
            //if(tempArray.get(i).parents.size()==0 && tempArray.get(i).parent==null)
              // rootArray.add(tempArray.get(i));
         }
	 maxLevel++;
	 //System.out.println("Max Level : " + maxLevel);
	 currLevel = maxLevel;
	 //int yStep = ((this.getHeight() - 50) / maxLevel);
	 currY = 50 + 40 * currLevel;
	 currXoffset = 20;
	 int totShapes = 0;

	 for(int i = 0; i < tempArray.size(); i++)
	 {
	 	if(tempArray.get(i).children.size() == 0)
			{
			 	//children.add(tempArray.get(i));
				totShapes += tempArray.get(i).shapes.size();
				if(tempArray.get(i).level == maxLevel - 1)
				{
			 	    children.add(tempArray.get(i));
				}

			}

	}

	//System.out.println(" No. of Shapes " + totShapes);
	int distBetweenShapes = this.getWidth() / totShapes;

	//int distBetweenShapes = this.getWidth() / totShapes;
	parents.clear();
	SKGroupTreeNode child;
	SKGroupTreeNode parent;
	child = children.get(0);
	tempCluster.add(child);
	children.removeNode(child);
	int l = 0;

	while(children.size() > 0)
	{
	while(l < tempCluster.size())
	{
		SKGroupTreeNode t = tempCluster.get(l);
		for(int j = 0; j < t.parents.size(); j++)
		{
			if(parents.indexOf(t.parents.get(j)) == -1)
			{
				for(int k = 0;k < children.size(); k++)
				{

					{
						for(int m = 0; m < children.get(k).parents.size(); m++)
						{
							//System.out.println(" PArent....s of" + children.get(k).name + "  " + children.get(k).parents.get(m).name + " " + children.size()) ;
						}
					}
					if(children.get(k).parents.indexOf(t.parents.get(j)) != -1)
					{
						child = children.get(k);
						tempCluster.add(child);
						parents.add(t.parents.get(j));
						//System.out.println("Added ::: " + child.name + " " + t.parents.get(j) + " " + children.size());
					}
				}
				for(int k = 0; k< tempCluster.size(); k++)
				{
					if(children.indexOf(tempCluster.get(k)) != -1)
						children.removeNode(tempCluster.get(k));
				}
			}
		}
		l++;
	}
	if(children.size() == 0) break;
	child = children.get(0);
	tempCluster.add(child);
	children.removeNode(child);
	}


	children.clear();
	tempCluster.copyArrayTo(children);

	int sx, sy;
	int[] xArray;
	xArray = new int[totShapes + 10];
	for(int i=0; i<children.size(); i++)
	{
		sy = currY;
		if(children.get(i).level == maxLevel - 1)
		{
			for(int j =0; j< children.get(i).shapes.size(); j++)
			{
				if( drawnShapes.indexOf(children.get(i).shapes.get(j)) == -1)
				{
					sx = currXoffset + drawnShapes.size() * distBetweenShapes;
					xArray[drawnShapes.size()] = sx;
					drawnShapes.add(children.get(i).shapes.get(j));

					//sy= finalArray.get(i).y +45;
                  			//if(finalArray.get(i).shapes.size()==1)  sx=finalArray.get(i).x;
                  			//else sx= (finalArray.get(i).x-(finalArray.get(i).width/4))+( ((finalArray.get(i).width/2)/(finalArray.get(i).shapes.size()+1) )*(a+1));

                  			//SKEdge edge = new SKEdge(finalArray.get(i).x,finalArray.get(i).y,sx,sy);
                  			//edges.add(edge);
                  			SKText shapeName = null;
                  			if(children.get(i).shapes.get(j)!=null)
                    			{
                     					shapeName = new SKText(this,container,children.get(i).shapes.get(j).Name.charAt(0)+""+children.get(i).shapes.get(j).ID,sx,sy);
                 					//-- Code Aditee
                     					temp.addSelectedShape(children.get(i).shapes.get(j));
	                   				//System.out.println("New Shape Added");
                 					//-- Code end
                    			}
                  			else
                     				shapeName = new SKText(this,container,"U",sx,sy);
                  				shapeName.setColor(red);

                  			if(text.findByValue(shapeName.value) == null)
                     			text.add(shapeName);

					if(finalArray.indexOf(children.get(i)) == -1)
					{
						if(children.get(i).shapes.size() == 1)
						{
							children.get(i).x = sx;
						}
						else
						{
							children.get(i).x = sx + (distBetweenShapes / 2);
						}
						children.get(i).y = currY - 50;
						children.get(i).width = distBetweenShapes;
						finalArray.add(children.get(i));
					}
					SKEdge edge = new SKEdge(children.get(i).x,children.get(i).y,sx,sy);
                  		        edges.add(edge);
				}
				else
				{
					SKEdge edge = new SKEdge(children.get(i).x,children.get(i).y,xArray[drawnShapes.indexOf(children.get(i).shapes.get(j))], sy);
                  			edges.add(edge);
				}
			}
		}
	}
	currLevel--; currY -=40;
	int distClusters ;//= (int) (distBetweenShapes * 1);



	//int tempInt = currLevel - 1;
	//for(int i = currLevel; i > tempInt - 1; i--)

	for(int i = currLevel ; i>0;i--)
	{

		drawnGroups.clear();
		//children.copyArrayTo(TEMP);
		TEMP.clear();
		TEMP1.clear();
		tempCluster.clear();
		for(int j = 0; j< children.size(); j++)
		{
		//System.out.println(" Curr Child: " + children.get(j).ID);
			TEMP.add(children.get(j));
			tempCluster.add(children.get(j));
		}

		for(int j = 0;j<tempArray.size();j++) // Add the children i.e leaf nodes to a temp Array
		{
			if(tempArray.get(j).children.size() == 0 && tempArray.get(j).level == currLevel)
				TEMP1.add(tempArray.get(j));
		}
		//tempCluster.clear();
		parents.clear();
		if(TEMP1.size() > 0)
		{
		//tempCluster.add(TEMP1.get(0));
		l = 0;
		while(TEMP1.size() > 0)
		{
			while(l < tempCluster.size())
			{
				SKGroupTreeNode t = tempCluster.get(l);
				for(int j = 0; j < t.parents.size(); j++)
				{
					if(parents.indexOf(t.parents.get(j)) == -1)
					{
						for(int k = 0;k < TEMP1.size(); k++)
						{

							{
								for(int m = 0; m < TEMP1.get(k).parents.size(); m++)
								{
								//System.out.println(" PArent....s of" + children.get(k).name + "  " + children.get(k).parents.get(m).name + " " + children.size()) ;
								}
							}
							if(TEMP1.get(k).parents.indexOf(t.parents.get(j)) != -1)
							{
								child = TEMP1.get(k);
								tempCluster.add(child);
								parents.add(t.parents.get(j));
						//System.out.println("Added ::: " + child.name + " " + t.parents.get(j) + " " + children.size());
							}
						}
						for(int k = 0; k< tempCluster.size(); k++)
						{
							if(TEMP1.indexOf(tempCluster.get(k)) != -1)
								TEMP1.removeNode(tempCluster.get(k));
						}
					}
				}
				l++;
			}
			if(TEMP1.size() == 0) break;
			child = TEMP1.get(0);
			tempCluster.add(child);
			TEMP1.removeNode(child);
		}

		for(int j = 0; j< tempCluster.size();j++)
		{
			TEMP.add(tempCluster.get(j));
		}
		}
		int numClusters = 0;
// 		for(int j = 0; j <tempArray.size(); j++)
// 		{
// 			if(tempArray.get(j).level == currLevel && (children.indexOf(tempArray.get(j)) == -1))
// 			{
// 				temp1 = tempArray.get(j);
// 				System.out.println(temp1.name + " " + temp1.ID + " " + temp1.parents.size() + " " + temp1.children.size() + " " + temp1.shapes.size() +  " " + temp1.level);
// 				if(tempArray.get(j).children.size() != 0)
// 					drawnGroups.add(tempArray.get(j));
// 
// 
// 				TEMP.add(tempArray.get(j));
// 			}
// 				//System.out.println(" Level " + i +" got nodes..");
// 		}
		TEMP.copyArrayTo(children);


		// Add the following loop to find the distance between the parents ....



		for(int  j = 0; j< children.size(); j++)
		{
			if(children.get(j).children.size() == 0)
			{
				for(int k = 0;k<children.get(j).shapes.size(); k++)
				{
					sy = currY + 50;
					if(drawnShapes.indexOf(children.get(j).shapes.get(k)) == -1)
					{
						SKBaseShape temp2 = children.get(j).shapes.get(k);
						//System.out.println("Processig shape" + temp2.Name + " " + temp2.ID);
						sx = currXoffset + drawnShapes.size() * distBetweenShapes;
						xArray[drawnShapes.size()] = sx;

						drawnShapes.add(children.get(j).shapes.get(k));

						SKText shapeName = null;
                  				if(children.get(j).shapes.get(k)!=null)
                    				{
                     					shapeName = new SKText(this,container,children.get(j).shapes.get(k).Name.charAt(0)+""+children.get(j).shapes.get(k).ID,sx,sy);
                 					//-- Code Aditee
                     					temp.addSelectedShape(children.get(j).shapes.get(k));
	                   				//System.out.println("New Shape Added");
                 					//-- Code end
                    				}
                  				else
                     					shapeName = new SKText(this,container,"U",sx,sy);
                  				shapeName.setColor(red);

                  				if(text.findByValue(shapeName.value) == null)
                     				text.add(shapeName);

						if(drawnGroups.indexOf(children.get(j)) == -1)
						{
						if(children.get(j).shapes.size() == 1)
						{
							children.get(j).x = sx;
						}
						else
						{
							children.get(j).x = sx + (distBetweenShapes / 2);
						}
						children.get(j).y = currY;
						children.get(j).width = distBetweenShapes;
						finalArray.add(children.get(j));
					}


						SKEdge edge = new SKEdge(children.get(j).x, children.get(j).y,sx,sy);
                  		        	edges.add(edge);

					}
					else
					{
						SKEdge edge = new SKEdge(children.get(j).x,children.get(j).y,xArray[drawnShapes.indexOf(children.get(j).shapes.get(k))], sy);
                  				edges.add(edge);
					}

				}
			}
		}
		parents.clear();
		drawnGroups.clear();
		
		
		
		
		// Loop to calculate the parents number...... added here!
		for(int j = 0; j <tempArray.size(); j++)
		{
			if(tempArray.get(j).level == currLevel - 1) // Level of parents
 			{

				if(tempArray.get(j).children.size() != 0)
						numClusters++;

			}
		}


 		distClusters = (int) (this.getWidth() - ((totShapes - drawnShapes.size()) * distBetweenShapes)) / (numClusters + 1);
 		drawnGroups.clear();
		parents.clear();


		for(int j = 0; j< children.size(); j++)
		{

			for(int k = 0; k < children.get(j).parents.size(); k++)
			{
				if( (finalArray.indexOf(children.get(j).parents.get(k)) == -1) && (children.get(j).parents.get(k).level == i - 1)) // parent not already added and is one level up
				{
					children.get(j).parents.get(k).x = distClusters * (drawnGroups.size() + 1); //children.get(j).x + (distClusters / 2); // + (parents.size() * distClusters);
					children.get(j).parents.get(k).y = currY - 50;
					drawnGroups.add(children.get(j).parents.get(k));
					finalArray.add(children.get(j).parents.get(k));
					parents.add(children.get(j).parents.get(k));
					SKEdge edge = new SKEdge(children.get(j).x,children.get(j).y,children.get(j).parents.get(k).x, children.get(j).parents.get(k).y);
                  		        edges.add(edge);
				}
				else
				{
					if(children.get(j).parents.get(k).level == i - 1)
					{
						SKEdge edge = new SKEdge(children.get(j).x,children.get(j).y,children.get(j).parents.get(k).x, children.get(j).parents.get(k).y);
                  		        	edges.add(edge);
					}
				}

			}
		}
/*
		//The following code I have written is absolutely useless...
		for(int j = 0; j<parents.size(); j++)
		{
			temp1 = parents.get(j);
			System.out.println("Parent Processing" + temp1.name + " " + temp1.ID + " " + temp1.parents.size() + " " + temp1.children.size() + " " + temp1.shapes.size() +  " " + temp1.level);
			//byte[] b;
			//int ch = System.in.read(b);
			if(parents.get(j).children.size() == 0)
			{
				for(int k = 0;k<parents.get(j).shapes.size(); k++)
				{
					sy = currY;
					if(drawnShapes.indexOf(parents.get(j).shapes.get(k)) == -1)
					{
						SKBaseShape temp2 = parents.get(j).shapes.get(k);
						System.out.println("Processig shape" + temp2.Name + " " + temp2.ID);
						sx = currXoffset + drawnShapes.size() * distBetweenShapes;
						xArray[drawnShapes.size()] = sx;
						drawnShapes.add(parents.get(j).shapes.get(k));

						SKText shapeName = null;
                  				if(parents.get(j).shapes.get(k)!=null)
                    				{
                     					shapeName = new SKText(this,container,parents.get(j).shapes.get(k).Name.charAt(0)+""+parents.get(j).shapes.get(k).ID,sx,sy);
                 					//-- Code Aditee
                     					temp.addSelectedShape(parents.get(j).shapes.get(k));
	                   				System.out.println("New Shape Added");
                 					//-- Code end
                    				}
                  				else
                     					shapeName = new SKText(this,container,"U",sx,sy);
                  				shapeName.setColor(red);

                  				if(text.findByValue(shapeName.value) == null)
                     				text.add(shapeName);


						SKEdge edge = new SKEdge(parents.get(j).x,parents.get(j).y,sx,sy);
                  		        	edges.add(edge);

					}
					else
					{
						SKEdge edge = new SKEdge(parents.get(j).x,parents.get(j).y,xArray[drawnShapes.indexOf(parents.get(j).shapes.get(k))], sy);
                  				edges.add(edge);
					}

				}
			}
		}*/

		currLevel--;
		currY -= 40;
		children.clear();
		parents.copyArrayTo(children);

	}


	for(int i=0; i<finalArray.size(); i++)
         {
            SKText groupName = null;
            if(finalArray.get(i).parents.size()==0 && finalArray.get(i).parent==null)
               groupName = new SKText(this,container,finalArray.get(i).name,finalArray.get(i).x,finalArray.get(i).y);
            else if(ID==0)
               groupName = new SKText(this,container,"G"+finalArray.get(i).ID,finalArray.get(i).x,finalArray.get(i).y);
            else
               groupName = new SKText(this,container,"C"+finalArray.get(i).ID,finalArray.get(i).x,finalArray.get(i).y);

            if(groupName!=null && !finalArray.get(i).matchingIP.equals(""))
            {
               groupName.setMatchingIPName(finalArray.get(i).matchingIP);
            }



            if(finalArray.get(i).ID==ID)
               groupName.setColor(magenta);
            else if (flag[Tree.indexOf(finalArray.get(i))]==1)
               groupName.setColor(blue);
            else groupName.setColor(black);

            if(groupName!=null)
            {
               groupName.repaint();
               if(text.findByValue(groupName.value) == null)
                  text.add(groupName);
            }

         }

        /* SKGTNArray tempNodes = new SKGTNArray(rootArray.size());
         SKGTNArray temproots = new SKGTNArray(rootArray.size());

         rootArray.copyArrayTo(temproots);
         for(int i=0; i<temproots.size(); i++)
         {
            SKGroups.setLevels(tempArray);
            SKGroups.separateGroups(temproots.get(i),tempNodes);
            int rootsize= temproots.get(i).shapes.size();
            for(int a=0; a<tempNodes.size(); a++)
            {
               int diff=rootsize-tempNodes.get(a).shapes.size();
               tempNodes.get(a).width=((temproots.get(i).width)-50*diff);
            }
            tempNodes.clear();
         }
         for(int i=0; i< rootArray.size();i++)
         {
            rootArray.get(i).x= (this.getWidth()/(rootArray.size()+1))*(i+1);
            rootArray.get(i).y=50;
         }
         finalArray.clear();

      //Add all the root nodes into the rootArray****
         if(rootArray.size()>0)
            for(int i=0;i<rootArray.size();i++)
               finalArray.add(rootArray.get(i));

         while(rootArray.size()>0)
         {
            SKGTNArray tempRootArray = new SKGTNArray(100);
            for (int a=0; a<rootArray.size(); a++)
               for (int b=0; b<rootArray.get(a).children.size(); b++)
               {
                  children.add(rootArray.get(a).children.get(b));
                  tempRootArray.add(rootArray.get(a).children.get(b));
               }
            if(tempRootArray.size()>0)tempRootArray.copyArrayTo(rootArray);
            else rootArray.clear();
         }
      //Add all the other nodes into the rootArray, in sequence****
         if(children.size()>0)
            for(int i=0;i<children.size();i++)
               finalArray.add(children.get(i));

         for(int i=0; i<finalArray.size();i++)
         {
            exshapes.clear();
            if(finalArray.get(i).children.size()>0)
            {
               SKShapeArray childshapes = new SKShapeArray(100);
            // create an array of shapes in all the groups****
               for(int c = 0; c <finalArray.get(i).children.size();c++)
                  for(int b=0; b<finalArray.get(i).children.get(c).shapes.size();b++)
                     if(   childshapes.indexOf( finalArray.get(i).children.get(c).shapes.get(b) ) ==  -1 )
                        childshapes.add(finalArray.get(i).children.get(c).shapes.get(b));

               if(finalArray.get(i).shapes.size()>childshapes.size())
               {
                  for(int c=0; c<finalArray.get(i).shapes.size(); c++)
                     if(childshapes.indexOf(finalArray.get(i).shapes.get(c))==-1)
                        exshapes.add(finalArray.get(i).shapes.get(c));
                  total = finalArray.get(i).children.size()+exshapes.size();
               }

               for(int a=0; a<finalArray.get(i).children.size(); a++)
               {
                  finalArray.get(i).children.get(a).y= finalArray.get(i).y + 45;
                  if(exshapes.size()==0)
                     finalArray.get(i).children.get(a).x=(finalArray.get(i).x-(finalArray.get(i).width/2))+((finalArray.get(i).width/(finalArray.get(i).children.size()+1) )*(a+1));
                  else
                     finalArray.get(i).children.get(a).x=(finalArray.get(i).x-(finalArray.get(i).width/2))+((finalArray.get(i).width/(total+1))*(a+1));
               }

               if(exshapes.size()>0)
                  for(int b=0;b<exshapes.size();b++)
                  {
                     x1=finalArray.get(i).x;
                     y1=finalArray.get(i).y;
                     y2=finalArray.get(i).y+45;
                     int exsx=(finalArray.get(i).x-(finalArray.get(i).width/2))+((finalArray.get(i).width/(total+1))*(finalArray.get(i).children.size()+b+1));
                     SKEdge edge = new SKEdge(x1,y1,exsx,y2);
                     edges.add(edge);
                     SKText shapeName = new SKText(this,container,exshapes.get(b).Name.charAt(0)+""+exshapes.get(b).ID,exsx,y2);
                     if(text.findByValue(shapeName.value) == null)
                        text.add(shapeName);
                     shapeName.repaint();
                  }
            }
         }
         for(int i=0; i<finalArray.size();i++)
            for(int a = 0; a <finalArray.get(i).children.size();a++)
            {
               x1=finalArray.get(i).x;
               y1=finalArray.get(i).y;
               x2=finalArray.get(i).children.get(a).x;
               y2=finalArray.get(i).children.get(a).y;
               SKEdge edge = new SKEdge(x1,y1,x2,y2);
               edges.add(edge);
            }
         for(int i=0; i<finalArray.size(); i++)
         {
            SKText groupName = null;
            if(finalArray.get(i).parents.size()==0 && finalArray.get(i).parent==null)
               groupName = new SKText(this,container,finalArray.get(i).name,finalArray.get(i).x,finalArray.get(i).y);
            else if(ID==0)
               groupName = new SKText(this,container,"G"+finalArray.get(i).ID,finalArray.get(i).x,finalArray.get(i).y);
            else
               groupName = new SKText(this,container,"C"+finalArray.get(i).ID,finalArray.get(i).x,finalArray.get(i).y);

            if(groupName!=null && !finalArray.get(i).matchingIP.equals(""))
            {
               groupName.setMatchingIPName(finalArray.get(i).matchingIP);
            }



            if(finalArray.get(i).ID==ID)
               groupName.setColor(magenta);
            else if (flag[Tree.indexOf(finalArray.get(i))]==1)
               groupName.setColor(blue);
            else groupName.setColor(black);

            if(groupName!=null)
            {
               groupName.repaint();
               if(text.findByValue(groupName.value) == null)
                  text.add(groupName);
            }

            if(finalArray.get(i).children.size()==0)
            {
               int sx, sy;
               for  (int a=0; a<finalArray.get(i).shapes.size(); a++)
               {
                  sy= finalArray.get(i).y +45;
                  if(finalArray.get(i).shapes.size()==1)  sx=finalArray.get(i).x;
                  else sx= (finalArray.get(i).x-(finalArray.get(i).width/4))+( ((finalArray.get(i).width/2)/(finalArray.get(i).shapes.size()+1) )*(a+1));
                  SKEdge edge = new SKEdge(finalArray.get(i).x,finalArray.get(i).y,sx,sy);
                  edges.add(edge);
                  SKText shapeName = null;
                  if(finalArray.get(i).shapes.get(a)!=null)
                    {
                     shapeName = new SKText(this,container,finalArray.get(i).shapes.get(a).Name.charAt(0)+""+finalArray.get(i).shapes.get(a).ID,sx,sy);
                 //-- Code Aditee
                     temp.addSelectedShape(finalArray.get(i).shapes.get(a));
                     System.out.println("New Shape Added");
                 //-- Code end
                    }
                  else
                     shapeName = new SKText(this,container,"U",sx,sy);
                  shapeName.setColor(red);

                  if(text.findByValue(shapeName.value) == null)
                     text.add(shapeName);
               }
            }
         }*/
      }
      public void addComponents()
      {
         for(int i=0 ;i <text.size(); i++)
            this.add(text.get(i));
      }

      public SKText doHitTest(int x, int y)
      {
         for(int i=0 ; i<text.size(); i++)
         {
            if(x>text.get(i).x-10 && x<text.get(i).x+15)
               if(y>text.get(i).y-10 && y<text.get(i).y+15)
                  return text.get(i);
         }
         return null;
      }
   }
